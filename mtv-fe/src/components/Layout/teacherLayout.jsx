import React, { useState, useEffect } from 'react';
import CreateAccount from '../Form/CreateAccount';
import { fetchUsers, importUsersFromCSV } from '../../api/api';
import Pagination from '@mui/material/Pagination';
import defaultAvatar from '../../assets/avatagit.jpg';
import { Filter } from 'lucide-react';
import { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material'; 


export default function TeacherLayout() {
  const [showCreateAccount, setShowCreateAccount] = useState(false);
  const [users, setUsers] = useState([]);
  const [filteredUsers, setFilteredUsers] = useState([]); 
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 9;

  const [filters, setFilters] = useState({
    date_sort: '', // asc ho·∫∑c desc
    degree: '',
    department: '',
  });
  

  const [isFilterMenuOpen, setIsFilterMenuOpen] = useState(false); 
  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false); // Tr·∫°ng th√°i m·ªü dialog Import CSV
  const [selectedFile, setSelectedFile] = useState(null); // L∆∞u file CSV ƒë∆∞·ª£c ch·ªçn
  const handleOpenCreateAccount = () => {
    setShowCreateAccount(true);
  };

  const handleCloseCreateAccount = () => {
    setShowCreateAccount(false);
  };

  // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng
  useEffect(() => {
    const getUsers = async () => {
      try {
        const data = await fetchUsers();
        setUsers(data);
        setFilteredUsers(data); // Kh·ªüi t·∫°o danh s√°ch l·ªçc
      } catch (error) {
        console.error('Error fetching users:', error);
      }
    };
    getUsers();
  }, []);

  // T√≠nh to√°n d·ªØ li·ªáu hi·ªÉn th·ªã cho trang hi·ªán t·∫°i
  const indexOfLastUser = currentPage * itemsPerPage;
  const indexOfFirstUser = indexOfLastUser - itemsPerPage;
  const currentUsers = filteredUsers.slice(indexOfFirstUser, indexOfLastUser);

  // X·ª≠ l√Ω thay ƒë·ªïi trang
  const handlePageChange = (event, value) => {
    setCurrentPage(value);
  };

  // X·ª≠ l√Ω thay ƒë·ªïi b·ªô l·ªçc
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
  };

  // L·ªçc theo ng√†y t·∫°o
  const filterByDate = () => {
    let filtered = [...users];
    if (filters.date_sort) {
      filtered.sort((a, b) => {
        const dateA = new Date(a.date_joined);
        const dateB = new Date(b.date_joined);
        return filters.date_sort === 'asc' ? dateA - dateB : dateB - dateA;
      });
    }
    setFilteredUsers(filtered);
    setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu ti√™n
  };

  // L·ªçc theo h·ªçc v·ªã
  const filterByDegree = () => {
    let filtered = [...users];
    if (filters.degree) {
      filtered = filtered.filter((user) =>
        user.profile?.degree?.toLowerCase().includes(filters.degree.toLowerCase())
      );
    }
    setFilteredUsers(filtered);
    setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu ti√™n
  };

  // L·ªçc theo ph√≤ng ban
  const filterByDepartment = () => {
    let filtered = [...users];
    if (filters.department) {
      filtered = filtered.filter((user) =>
        user.profile?.department?.toLowerCase().includes(filters.department.toLowerCase())
      );
    }
    setFilteredUsers(filtered);
    setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu ti√™n
  };
  const handleImportCSV = async () => {
    if (!selectedFile) {
      alert('Vui l√≤ng ch·ªçn m·ªôt file CSV!');
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await importUsersFromCSV(formData);
      alert('Import th√†nh c√¥ng!');
      const updatedUsers = await fetchUsers();
      setUsers(updatedUsers);
      setFilteredUsers(updatedUsers);
      setIsImportDialogOpen(false);
    } catch (error) {
      console.error('Error importing CSV:', error);
      alert('ƒê√£ x·∫£y ra l·ªói khi import CSV.');
    }
  };
  const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
  };

  return (
    <div className="p-4">
      {/* N√∫t Import CSV, T·∫°o t√†i kho·∫£n v√† L·ªçc */}
      <div className="flex justify-between items-center mb-4">
        <div className="flex gap-2">
        <button
            className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 transition"
            onClick={() => setIsImportDialogOpen(true)} // M·ªü dialog khi nh·∫•n n√∫t
          >
            <span>üì§</span> Import CSV
          </button>
          <button
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition"
            onClick={handleOpenCreateAccount}
          >
            <span>‚ûï</span> T·∫°o t√†i kho·∫£n
          </button>
        </div>

        {/* Menu L·ªçc */}
        <div className="relative">
          <button
            onClick={() => setIsFilterMenuOpen(!isFilterMenuOpen)}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition"
          >
           <Filter />
          </button>
          {isFilterMenuOpen && (
            <div className="absolute right-0 mt-2 w-64 bg-white border border-gray-300 rounded shadow-lg z-10">
              <div className="p-4">
                <h3 className="text-sm font-semibold mb-2">L·ªçc theo ng√†y t·∫°o</h3>
                <select
                  name="date_sort"
                  value={filters.date_sort}
                  onChange={handleFilterChange}
                  className="border border-gray-300 rounded px-2 py-1 w-full mb-2"
                >
                  <option value="">S·∫Øp x·∫øp ng√†y t·∫°o</option>
                  <option value="asc">TƒÉng d·∫ßn</option>
                  <option value="desc">Gi·∫£m d·∫ßn</option>
                </select>
                <button
                  onClick={filterByDate}
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition w-full mb-4"
                >
                  L·ªçc ng√†y t·∫°o
                </button>

                <h3 className="text-sm font-semibold mb-2">L·ªçc theo h·ªçc v·ªã</h3>
                <select
                  name="degree"
                  value={filters.degree}
                  onChange={handleFilterChange}
                  className="border border-gray-300 rounded px-2 py-1 w-full mb-2"
                >
                  <option value="">Ch·ªçn h·ªçc v·ªã</option>
                  <option value="TS">Ti·∫øn sƒ©</option>
                  <option value="THS">Th·∫°c sƒ©</option>
                  <option value="PGS">Ph√≥ gi√°o s∆∞</option>
                  <option value="GS">Gi√°o s∆∞</option>
                </select>
                <button
                  onClick={filterByDegree}
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition w-full mb-4"
                >
                  L·ªçc h·ªçc v·ªã
                </button>

                <h3 className="text-sm font-semibold mb-2">L·ªçc theo ph√≤ng ban</h3>
                <select
                  name="department"
                  value={filters.department}
                  onChange={handleFilterChange}
                  className="border border-gray-300 rounded px-2 py-1 w-full mb-2"
                >
                  <option value="">Ch·ªçn ph√≤ng ban</option>
                  <option value="HR">HR</option>
                  <option value="IT">IT</option>
                  <option value="LEGAL">LEGAL</option>
                  <option value="SALES">SALES</option>
                  <option value="TOURISM">TOURISM</option>
                  <option value="FINANCE">FINANCE</option>
                  <option value="MARKETING">MARKETING</option>
                  <option value="OPERATIONS">OPERATIONS</option>
                  <option value="ENGINEERING">ENGINEERING</option>
                  <option value="ARCHITECTURE">ARCHITECTURE</option>
                  <option value="ADMINISTRATION">ADMINISTRATION</option>
                  <option value="GRAPHIC_DESIGN">GRAPHIC DESIGN</option>
                  <option value="CUSTOMER_SERVICE">CUSTOMER SERVICE</option>
                  <option value="FOREIGN_LANGUAGES">FOREIGN LANGUAGES</option>
                  <option value="INFORMATION_TECHNOLOGY">INFORMATION TECHNOLOGY</option>
                </select>
                <button
                  onClick={filterByDepartment}
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition w-full"
                >
                  L·ªçc ph√≤ng ban
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Danh s√°ch ng∆∞·ªùi d√πng d·∫°ng th·∫ª */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {currentUsers.map((user, index) => (
          <div
            key={user.id}
            className="flex items-center border border-gray-300 rounded-lg p-4 shadow hover:shadow-lg transition"
          >
            {/* Avatar b√™n tr√°i */}
            <img
              src={user.avatar || defaultAvatar}
              alt="Avatar"
              className="w-16 h-16 rounded-full mr-4"
            />
            <div className="flex-1">
              <h3 className="text-lg font-semibold">
                {user.full_name || 'N/A'}
              </h3>
              <p className="text-sm text-gray-600">
                <strong>Tr·∫°ng th√°i:</strong>{' '}
                {user.is_active ? 'ƒê√£ k√≠ch ho·∫°t' : 'Ch∆∞a k√≠ch ho·∫°t'}
              </p>
              <p className="text-sm text-gray-600">
                <strong>H·ªçc v·ªã:</strong>{' '}
                {user.profile.degree || 'N/A'}
              </p>
              <p className="text-sm text-gray-600">
                <strong>Ng√†y t·∫°o:</strong>{' '}
                {new Date(user.date_joined).toLocaleDateString('vi-VN')}
              </p>
            </div>
          </div>
        ))}
      </div>

      {/* Pagination */}
      <div className="flex justify-center mt-4">
        <Pagination
          count={Math.ceil(filteredUsers.length / itemsPerPage)} // T·ªïng s·ªë trang
          page={currentPage} // Trang hi·ªán t·∫°i
          onChange={handlePageChange} // X·ª≠ l√Ω khi thay ƒë·ªïi trang
          color="primary"
          variant="outlined"
          shape="rounded"
        />
      </div>

      {/* Form T·∫°o t√†i kho·∫£n */}
      {showCreateAccount && <CreateAccount onClose={handleCloseCreateAccount} />}
    </div>
  );
}
